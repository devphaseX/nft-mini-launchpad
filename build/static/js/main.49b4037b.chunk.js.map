{"version":3,"sources":["webpack:///./src/utils.ts?7dda","MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","candy-machine.ts","connection.tsx"],"names":["toDate","value","Date","toNumber","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","anchor","PublicKey","CIVIC","CIVIC_GATEKEEPER_NETWORK","getAtaForMint","async","mint","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","gatekeeperNetwork","Buffer","from","getNetworkToken","wallet","RootContainer","styled","_ref","theme","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","DoneContainer","_ref2","marginBottom","fontWeight","ItemContainer","MintCountdown","_ref3","date","status","onComplete","renderCountdown","_ref4","days","hours","minutes","seconds","completed","_jsx","children","_jsxs","Paper","elevation","concat","Countdown","renderer","CTAButton","Button","_templateObject","_taggedTemplateLiteral","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","useWallet","connection","useConnection","verified","setVerified","useState","requestGatewayToken","gatewayStatus","useGateway","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","toBase58","Error","gatewayToken","findGatewayToken","publicKey","isValid","window","open","gatewayTokenAddress","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","onGatewayTokenChange","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","_templateObject2","getCountdownDate","_candyMachine$state$e","endSettings","endSettingType","number","goLiveDate","getTime","undefined","Home","props","_candyMachine$state","_candyMachine$state2","_candyMachine$state2$","isUserMinting","setIsUserMinting","setCandyMachine","alertState","setAlertState","message","severity","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useAnchorWallet","connect","connected","cluster","refreshCandyMachineState","useCallback","commitment","arguments","length","error","hideDuration","Connection","candyMachineId","_cndy$state$endSettin","_cndy$state$endSettin2","_cndy$state$whitelist","_cndy$state$whitelist2","_cndy$state$gatekeepe","cndy","getCandyMachineState","active","presale","isWLUser","userPrice","price","whitelistMintSettings","token","balance","getTokenAccountBalance","parseInt","amount","e","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","collectionPDA","getCollectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","program","_setupMint","setupMint","createAccountsForMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintResult","mintOneToken","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","_Fragment","Grid","container","direction","wrap","item","xs","Typography","align","signTransaction","GatewayProvider","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","adapter","name","SolanaMobileWalletAdapterWalletName","preventDefault","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","process","REACT_APP_SOLANA_NETWORK","REACT_APP_SOLANA_RPC_HOST","getCandyMachineId","REACT_APP_CANDY_MACHINE_ID","_process$env$REACT_AP","_process$env$REACT_AP2","clusterApiUrl","App","endpoint","useMemo","wallets","PhantomWalletAdapter","SolflareWalletAdapter","SlopeWalletAdapter","SolletWalletAdapter","SolletExtensionWalletAdapter","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","WalletDialogProvider","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","done","slot","confirmations","Promise","resolve","reject","signatureStatuses","getSignatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","currentBlockTime","all","idl","fetchIdl","account","fetch","getProgramState","_await$connection$get","getSlot","getBlockTime","getCurrentBlockTime","timeDiff","id","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","candyMachineAddress","Keypair","generate","userTokenAccountAddress","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","MintLayout","span","lamports","getMinimumBalanceForRentExemption","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","sendTransactions","SequenceType","StopOnFailure","txs","_setupState$mint","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","getCandyMachineCreator","freezePda","getFreezePda","toString","freezePdaState","getFreezePdaState","freezeAta","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionData","collectionPda","collectionMint","collectionAuthorityRecord","newAuthority","getCollectionAuthorityRecordPDA","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","blockhash","WalletNotConnectedError","unsignedTxns","getLatestBlockhash","i","Transaction","forEach","add","recentBlockhash","feePayer","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signedTxns","signAllTransactions","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","encodedTransaction","_serialize","args","encoding","res","_rpcRequest","simulateTransaction","logs","line","slice","JSON","stringify","subId","onSignature","context"],"mappings":"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","file":"static/js/main.49b4037b.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const CIVIC_GATEKEEPER_NETWORK =\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import { Paper } from \"@mui/material\";\nimport Countdown from \"react-countdown\";\nimport React from \"react\";\nimport { styled } from \"@mui/system\";\n\nconst RootContainer = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  padding: theme.spacing(0),\n  \"& > *\": {\n    margin: theme.spacing(0.4),\n    width: theme.spacing(6),\n    height: theme.spacing(6),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    background: \"#384457\",\n    color: \"white\",\n    borderRadius: 5,\n    fontSize: 10,\n  },\n}));\n\nconst DoneContainer = styled(\"span\")(({ theme }) => ({\n  display: \"flex\",\n  margin: 0,\n  marginBottom: theme.spacing(0.5),\n  height: theme.spacing(3.5),\n  padding: theme.spacing(1),\n  flexDirection: \"column\",\n  alignContent: \"center\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  background: \"#384457\",\n  color: \"white\",\n  borderRadius: 5,\n  fontWeight: \"bold\",\n  fontSize: 18,\n}));\n\nconst ItemContainer = styled(\"span\")({\n  fontWeight: \"bold\",\n  fontSize: 18,\n});\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <DoneContainer>{status}</DoneContainer> : null;\n    } else {\n      return (\n        <RootContainer style={style}>\n          <Paper elevation={0}>\n            <ItemContainer>{hours < 10 ? `0${hours}` : hours}</ItemContainer>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <ItemContainer>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </ItemContainer>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <ItemContainer>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </ItemContainer>\n            <span>secs</span>\n          </Paper>\n        </RootContainer>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@mui/material/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@mui/material\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@mui/material\";\nimport Paper from \"@mui/material/Paper\";\nimport Alert from \"@mui/lab/Alert\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { SolanaMobileWalletAdapterWalletName } from \"@solana-mobile/wallet-adapter-mobile\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const anchorWallet = useAnchorWallet();\n  const { connect, connected, publicKey, wallet } = useWallet();\n  const cluster = props.network;\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!publicKey) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet as anchor.Wallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (await getAtaForMint(mint, publicKey))[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (await getAtaForMint(mint, publicKey))[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (connected && candyMachine?.program && publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(candyMachine, publicKey);\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"#151A1F\",\n            borderRadius: 6,\n          }}\n        >\n          {!connected ? (\n            <ConnectButton\n              onClick={(e) => {\n                if (\n                  wallet?.adapter.name === SolanaMobileWalletAdapterWalletName\n                ) {\n                  connect();\n                  e.preventDefault();\n                }\n              }}\n            >\n              Connect Wallet\n            </ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                              ? \"PRESALE\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                publicKey &&\n                anchorWallet?.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                      signTransaction: anchorWallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: \"grey\" }}\n          >\n            Powered by METAPLEX\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@mui/material\";\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport { SlopeWalletAdapter } from \"@solana/wallet-adapter-slope\";\nimport { SolflareWalletAdapter } from \"@solana/wallet-adapter-solflare\";\nimport {\n  SolletWalletAdapter,\n  SolletExtensionWalletAdapter,\n} from \"@solana/wallet-adapter-sollet\";\n\nconst theme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      new PhantomWalletAdapter(),\n      new SolflareWalletAdapter({ network }),\n      new SlopeWalletAdapter(),\n      new SolletWalletAdapter({ network }),\n      new SolletExtensionWalletAdapter({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n              error={error}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nexport const getFreezePdaState = async (\n  program: anchor.Program,\n  freezePda: anchor.web3.PublicKey\n): Promise<any> => {\n  try {\n    const state: any = await program.account.freezePda.fetch(freezePda);\n    return state;\n  } catch (error) {\n    return null;\n  }\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getFreezePda = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"freeze\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  const freezePda = (await getFreezePda(candyMachineAddress))[0];\n  console.log(freezePda.toString());\n\n  const freezePdaState = await getFreezePdaState(\n    candyMachine.program,\n    freezePda\n  );\n\n  console.log(\"Freeze state: \");\n  console.log(freezePdaState);\n\n  if (freezePdaState != null) {\n    remainingAccounts.push({\n      pubkey: freezePda,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: userTokenAccountAddress,\n      isWritable: false,\n      isSigner: false,\n    });\n    if (candyMachine.state.tokenMint != null) {\n      const freezeAta = (\n        await getAtaForMint(candyMachine.state.tokenMint, freezePda)\n      )[0];\n      remainingAccounts.push({\n        pubkey: freezeAta,\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  }\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  blockhash?: Blockhash,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!blockhash) {\n    blockhash = (await connection.getLatestBlockhash(commitment)).blockhash;\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = blockhash;\n    transaction.feePayer = wallet.publicKey;\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  blockhash?: Blockhash\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n\n    transaction.recentBlockhash =\n      blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\n    if (includesFeePayer) {\n      transaction.feePayer = signers[0].publicKey;\n    } else {\n      transaction.feePayer = wallet.publicKey;\n    }\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  blockhash?: Blockhash,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash =\n    blockhash || (await connection.getLatestBlockhash(commitment)).blockhash;\n  if (includesFeePayer) {\n    transaction.feePayer = signers[0].publicKey;\n  } else {\n    transaction.feePayer = wallet.publicKey;\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}